version: "3"

services:

  app:
    build:
      context: ../
      dockerfile: docker-deployment/Dockerfile.app
      args:
        app_version: ${APP_VERSION}]
    dns_search: .
    container_name: myapp
    environment:
      HTTP_PORT: ${APP_HTTP_PORT} # 4000         
    ports:
      - "${APP_HTTP_PORT}:${APP_HTTP_PORT}" # 4000
    healthcheck:
        # disable: true
        test: curl -f -s -S http://localhost:${APP_HTTP_PORT} || exit 1
        interval: 30s
        timeout: 5s
        retries: 3
    restart: always
    networks:
        - backend
    depends_on:
      - mongo

  client:
    build:
      context: ../
      dockerfile: docker-deployment/Dockerfile.client
      args:
        app_version: ${APP_VERSION}]
    dns_search: .
    container_name: myclient
    environment:
      HTTP_PORT: ${CLIENT_HTTP_PORT} # 4000  
    ports:
      - "${CLIENT_HTTP_PORT}:${CLIENT_HTTP_PORT}" # 3000:3000
    healthcheck:
        # disable: true
        test: curl -f -s -S http://localhost:${CLIENT_HTTP_PORT} || exit 1
        interval: 30s
        timeout: 5s
        retries: 3
    restart: always
    networks:
        - backend

  mongo:
    image: mongo
    container_name: mymongo
    dns_search: .
    environment:
      # MYSQL_DATABASE: ${DB_NAME}
      # MYSQL_USER: ${DB_USER}
      # MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
    expose:
      - "${DB_HTTP_PORT}" # 27017
    volumes:
      - ../app/data:/data/db
    ports:
      - "${DB_HTTP_PORT}:${DB_HTTP_PORT}"
    restart: always

networks:
    backend:
        driver: bridge